# Name of your application. Used to uniquely configure containers.
service: spoty-fest

# Name of the container image.
image: hugo0706/spoty-fest

# Deploy to these servers.
servers:
  web:
    - 206.189.110.224
  job:
    hosts:
      - 206.189.110.224
    cmd: bin/jobs

# Enable SSL auto certification via Let's Encrypt (and allow for multiple apps on one server).
# If using something like Cloudflare, it is recommended to set encryption mode
# in Cloudflare's SSL/TLS setting to "Full" to enable end-to-end encryption.
proxy:
  ssl: true
  host: spotyfest.com
  # kamal-proxy connects to your container over port 80, use `app_port` to specify a different port.
  # app_port: 3000

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  username: hugo0706

  # Always use an access token rather than real password (pulled from .kamal/secrets).
  password:
    - KAMAL_REGISTRY_PASSWORD

# Configure builder setup.
builder:
  arch: amd64

# Inject ENV variables into containers (secrets come from .kamal/secrets).
#
<% require "dotenv"; Dotenv.load(".env") %>
env:
  clear:
    DB_HOST: 206.189.110.224
  secret:
    - RAILS_MASTER_KEY
    - POSTGRES_PASSWORD
    - RAILS_ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY
    - RAILS_ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY
    - SPOTIFY_REDIRECT_URI
    - SPOTIFY_CLIENT_SECRET
    - SPOTIFY_CLIENT_ID
    - REDIS_URL
    - KAMAL_REGISTRY_PASSWORD

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
#
aliases:
  shell: app exec --interactive --reuse "bash"
  console: app exec --interactive --reuse "bin/rails console"
  logs: app logs -f
  dbc: app exec --interactive --reuse "bin/rails dbconsole"
# Use a different ssh user than root
#
# ssh:
#   user: app

# Use a persistent storage volume.
#
# volumes:
#   - "app_storage:/app/storage"

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
#
# asset_path: /app/public/assets

# Configure rolling deploys by setting a wait time between batches of restarts.
#
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Use accessory services (secrets come from .kamal/secrets).
#
accessories:
  db:
    image: postgres:15
    host: 206.189.110.224
    port: "127.0.0.1:5432:5432"
    env:
      clear:
        POSTGRES_HOST_AUTH_METHOD: "trust"
      secret:
        - POSTGRES_PASSWORD
    files:
      #- config/postgres/production.conf:/etc/postgresql/postgresql.conf
      - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
    directories:
      - postgres_data:/var/lib/postgresql/data
  redis:
    image: redis:7.0
    host: 206.189.110.224
    cmd: "redis-server --requirepass <%= ENV['REDIS_PASSWORD'] %>"
    port: "127.0.0.1:6379:6379"
    directories:
      - redis_data:/var/lib/redis/data
